initSidebarItems({"constant":[["BIG_ENDIAN",""],["BYTE_ORDER",""],["DUCKDB_API_0_3_1",""],["DUCKDB_API_0_3_2",""],["DUCKDB_API_LATEST",""],["DUCKDB_API_VERSION",""],["DUCKDB_TYPE_DUCKDB_TYPE_BIGINT",""],["DUCKDB_TYPE_DUCKDB_TYPE_BLOB",""],["DUCKDB_TYPE_DUCKDB_TYPE_BOOLEAN",""],["DUCKDB_TYPE_DUCKDB_TYPE_DATE",""],["DUCKDB_TYPE_DUCKDB_TYPE_DECIMAL",""],["DUCKDB_TYPE_DUCKDB_TYPE_DOUBLE",""],["DUCKDB_TYPE_DUCKDB_TYPE_ENUM",""],["DUCKDB_TYPE_DUCKDB_TYPE_FLOAT",""],["DUCKDB_TYPE_DUCKDB_TYPE_HUGEINT",""],["DUCKDB_TYPE_DUCKDB_TYPE_INTEGER",""],["DUCKDB_TYPE_DUCKDB_TYPE_INTERVAL",""],["DUCKDB_TYPE_DUCKDB_TYPE_INVALID",""],["DUCKDB_TYPE_DUCKDB_TYPE_JSON",""],["DUCKDB_TYPE_DUCKDB_TYPE_LIST",""],["DUCKDB_TYPE_DUCKDB_TYPE_MAP",""],["DUCKDB_TYPE_DUCKDB_TYPE_SMALLINT",""],["DUCKDB_TYPE_DUCKDB_TYPE_STRUCT",""],["DUCKDB_TYPE_DUCKDB_TYPE_TIME",""],["DUCKDB_TYPE_DUCKDB_TYPE_TIMESTAMP",""],["DUCKDB_TYPE_DUCKDB_TYPE_TIMESTAMP_MS",""],["DUCKDB_TYPE_DUCKDB_TYPE_TIMESTAMP_NS",""],["DUCKDB_TYPE_DUCKDB_TYPE_TIMESTAMP_S",""],["DUCKDB_TYPE_DUCKDB_TYPE_TINYINT",""],["DUCKDB_TYPE_DUCKDB_TYPE_UBIGINT",""],["DUCKDB_TYPE_DUCKDB_TYPE_UINTEGER",""],["DUCKDB_TYPE_DUCKDB_TYPE_USMALLINT",""],["DUCKDB_TYPE_DUCKDB_TYPE_UTINYINT",""],["DUCKDB_TYPE_DUCKDB_TYPE_UUID",""],["DUCKDB_TYPE_DUCKDB_TYPE_VARCHAR",""],["DuckDBError",""],["DuckDBSuccess",""],["EXIT_FAILURE",""],["EXIT_SUCCESS",""],["FD_SETSIZE",""],["INT16_MAX",""],["INT16_MIN",""],["INT32_MAX",""],["INT32_MIN",""],["INT8_MAX",""],["INT8_MIN",""],["INTPTR_MAX",""],["INTPTR_MIN",""],["INT_FAST16_MAX",""],["INT_FAST16_MIN",""],["INT_FAST32_MAX",""],["INT_FAST32_MIN",""],["INT_FAST8_MAX",""],["INT_FAST8_MIN",""],["INT_LEAST16_MAX",""],["INT_LEAST16_MIN",""],["INT_LEAST32_MAX",""],["INT_LEAST32_MIN",""],["INT_LEAST8_MAX",""],["INT_LEAST8_MIN",""],["LITTLE_ENDIAN",""],["PDP_ENDIAN",""],["PTRDIFF_MAX",""],["PTRDIFF_MIN",""],["RAND_MAX",""],["SIG_ATOMIC_MAX",""],["SIG_ATOMIC_MIN",""],["SIZE_MAX",""],["UINT16_MAX",""],["UINT32_MAX",""],["UINT8_MAX",""],["UINTPTR_MAX",""],["UINT_FAST16_MAX",""],["UINT_FAST32_MAX",""],["UINT_FAST8_MAX",""],["UINT_LEAST16_MAX",""],["UINT_LEAST32_MAX",""],["UINT_LEAST8_MAX",""],["WCONTINUED",""],["WEXITED",""],["WINT_MAX",""],["WINT_MIN",""],["WNOHANG",""],["WNOWAIT",""],["WSTOPPED",""],["WUNTRACED",""],["_ALLOCA_H",""],["_ATFILE_SOURCE",""],["_BITS_BYTESWAP_H",""],["_BITS_ENDIANNESS_H",""],["_BITS_ENDIAN_H",""],["_BITS_PTHREADTYPES_ARCH_H",""],["_BITS_PTHREADTYPES_COMMON_H",""],["_BITS_STDINT_INTN_H",""],["_BITS_STDINT_UINTN_H",""],["_BITS_TIME64_H",""],["_BITS_TYPESIZES_H",""],["_BITS_TYPES_H",""],["_BITS_UINTN_IDENTITY_H",""],["_BITS_WCHAR_H",""],["_DEFAULT_SOURCE",""],["_ENDIAN_H",""],["_FEATURES_H",""],["_POSIX_C_SOURCE",""],["_POSIX_SOURCE",""],["_STDC_PREDEF_H",""],["_STDINT_H",""],["_STDLIB_H",""],["_STRUCT_TIMESPEC",""],["_SYS_CDEFS_H",""],["_SYS_SELECT_H",""],["_SYS_TYPES_H",""],["_THREAD_MUTEX_INTERNAL_H",""],["_THREAD_SHARED_TYPES_H",""],["__BIG_ENDIAN",""],["__BIT_TYPES_DEFINED__",""],["__BYTE_ORDER",""],["__ENUM_IDTYPE_T",""],["__FD_SETSIZE",""],["__FD_ZERO_STOS",""],["__FLOAT_WORD_ORDER",""],["__GLIBC_MINOR__",""],["__GLIBC_USE_DEPRECATED_GETS",""],["__GLIBC_USE_DEPRECATED_SCANF",""],["__GLIBC_USE_IEC_60559_BFP_EXT",""],["__GLIBC_USE_IEC_60559_BFP_EXT_C2X",""],["__GLIBC_USE_IEC_60559_FUNCS_EXT",""],["__GLIBC_USE_IEC_60559_FUNCS_EXT_C2X",""],["__GLIBC_USE_IEC_60559_TYPES_EXT",""],["__GLIBC_USE_ISOC2X",""],["__GLIBC_USE_LIB_EXT2",""],["__GLIBC__",""],["__GNU_LIBRARY__",""],["__HAVE_DISTINCT_FLOAT128",""],["__HAVE_DISTINCT_FLOAT128X",""],["__HAVE_DISTINCT_FLOAT16",""],["__HAVE_DISTINCT_FLOAT32",""],["__HAVE_DISTINCT_FLOAT32X",""],["__HAVE_DISTINCT_FLOAT64",""],["__HAVE_DISTINCT_FLOAT64X",""],["__HAVE_FLOAT128",""],["__HAVE_FLOAT128X",""],["__HAVE_FLOAT16",""],["__HAVE_FLOAT32",""],["__HAVE_FLOAT32X",""],["__HAVE_FLOAT64",""],["__HAVE_FLOAT64X",""],["__HAVE_FLOAT64X_LONG_DOUBLE",""],["__HAVE_FLOATN_NOT_TYPEDEF",""],["__HAVE_GENERIC_SELECTION",""],["__INO_T_MATCHES_INO64_T",""],["__LITTLE_ENDIAN",""],["__LONG_DOUBLE_USES_FLOAT128",""],["__OFF_T_MATCHES_OFF64_T",""],["__PDP_ENDIAN",""],["__PTHREAD_MUTEX_HAVE_PREV",""],["__RLIM_T_MATCHES_RLIM64_T",""],["__SIZEOF_PTHREAD_ATTR_T",""],["__SIZEOF_PTHREAD_BARRIERATTR_T",""],["__SIZEOF_PTHREAD_BARRIER_T",""],["__SIZEOF_PTHREAD_CONDATTR_T",""],["__SIZEOF_PTHREAD_COND_T",""],["__SIZEOF_PTHREAD_MUTEXATTR_T",""],["__SIZEOF_PTHREAD_MUTEX_T",""],["__SIZEOF_PTHREAD_RWLOCKATTR_T",""],["__SIZEOF_PTHREAD_RWLOCK_T",""],["__STATFS_MATCHES_STATFS64",""],["__STDC_IEC_559_COMPLEX__",""],["__STDC_IEC_559__",""],["__STDC_ISO_10646__",""],["__SYSCALL_WORDSIZE",""],["__TIMESIZE",""],["__USE_ATFILE",""],["__USE_FORTIFY_LEVEL",""],["__USE_ISOC11",""],["__USE_ISOC95",""],["__USE_ISOC99",""],["__USE_MISC",""],["__USE_POSIX",""],["__USE_POSIX199309",""],["__USE_POSIX199506",""],["__USE_POSIX2",""],["__USE_POSIX_IMPLICITLY",""],["__USE_XOPEN2K",""],["__USE_XOPEN2K8",""],["__WALL",""],["__WCLONE",""],["__WCOREFLAG",""],["__WNOTHREAD",""],["__WORDSIZE",""],["__WORDSIZE_TIME64_COMPAT32",""],["__W_CONTINUED",""],["__bool_true_false_are_defined",""],["__clock_t_defined",""],["__clockid_t_defined",""],["__glibc_c99_flexarr_available",""],["__have_pthread_attr_t",""],["__ldiv_t_defined",""],["__lldiv_t_defined",""],["__sigset_t_defined",""],["__time_t_defined",""],["__timer_t_defined",""],["__timeval_defined",""],["duckdb_state_DuckDBError",""],["duckdb_state_DuckDBSuccess",""],["false_",""],["idtype_t_P_ALL",""],["idtype_t_P_PGID",""],["idtype_t_P_PID",""],["true_",""]],"enum":[["ErrorCode","Error Codes"]],"fn":[["_Exit",""],["__ctype_get_mb_cur_max",""],["a64l",""],["abort",""],["abs",""],["aligned_alloc",""],["alloca",""],["at_quick_exit",""],["atexit",""],["atof",""],["atoi",""],["atol",""],["atoll",""],["bsearch",""],["calloc",""],["clearenv",""],["code_to_str",""],["div",""],["drand48",""],["drand48_r",""],["duckdb_add_replacement_scan","Add a replacement scan definition to the specified database"],["duckdb_append_blob","Append a blob value to the appender."],["duckdb_append_bool","Append a bool value to the appender."],["duckdb_append_data_chunk","Appends a pre-filled data chunk to the specified appender."],["duckdb_append_date","Append a duckdb_date value to the appender."],["duckdb_append_double","Append a double value to the appender."],["duckdb_append_float","Append a float value to the appender."],["duckdb_append_hugeint","Append a duckdb_hugeint value to the appender."],["duckdb_append_int16","Append an int16_t value to the appender."],["duckdb_append_int32","Append an int32_t value to the appender."],["duckdb_append_int64","Append an int64_t value to the appender."],["duckdb_append_int8","Append an int8_t value to the appender."],["duckdb_append_interval","Append a duckdb_interval value to the appender."],["duckdb_append_null","Append a NULL value to the appender (of any type)."],["duckdb_append_time","Append a duckdb_time value to the appender."],["duckdb_append_timestamp","Append a duckdb_timestamp value to the appender."],["duckdb_append_uint16","Append a uint16_t value to the appender."],["duckdb_append_uint32","Append a uint32_t value to the appender."],["duckdb_append_uint64","Append a uint64_t value to the appender."],["duckdb_append_uint8","Append a uint8_t value to the appender."],["duckdb_append_varchar","Append a varchar value to the appender."],["duckdb_append_varchar_length","Append a varchar value to the appender."],["duckdb_appender_begin_row","A nop function, provided for backwards compatibility reasons. Does nothing. Only `duckdb_appender_end_row` is required."],["duckdb_appender_close","Close the appender, flushing all intermediate state in the appender to the table and closing it for further appends."],["duckdb_appender_create","Creates an appender object."],["duckdb_appender_destroy","Close the appender and destroy it. Flushing all intermediate state in the appender to the table, and de-allocating all memory associated with the appender."],["duckdb_appender_end_row","Finish the current row of appends. After end_row is called, the next row can be appended."],["duckdb_appender_error","Returns the error message associated with the given appender. If the appender has no error message, this returns `nullptr` instead."],["duckdb_appender_flush","Flush the appender to the table, forcing the cache of the appender to be cleared and the data to be appended to the base table."],["duckdb_arrow_column_count","Returns the number of columns present in a the arrow result object."],["duckdb_arrow_row_count","Returns the number of rows present in a the arrow result object."],["duckdb_arrow_rows_changed","Returns the number of rows changed by the query stored in the arrow result. This is relevant only for INSERT/UPDATE/DELETE queries. For other queries the rows_changed will be 0."],["duckdb_bind_add_result_column","Adds a result column to the output of the table function."],["duckdb_bind_blob","Binds a blob value to the prepared statement at the specified index."],["duckdb_bind_boolean","Binds a bool value to the prepared statement at the specified index."],["duckdb_bind_date","Binds a duckdb_date value to the prepared statement at the specified index."],["duckdb_bind_double","Binds an double value to the prepared statement at the specified index."],["duckdb_bind_float","Binds an float value to the prepared statement at the specified index."],["duckdb_bind_get_extra_info","Retrieves the extra info of the function as set in `duckdb_table_function_set_extra_info`"],["duckdb_bind_get_parameter","Retrieves the parameter at the given index."],["duckdb_bind_get_parameter_count","Retrieves the number of regular (non-named) parameters to the function."],["duckdb_bind_hugeint","Binds an duckdb_hugeint value to the prepared statement at the specified index."],["duckdb_bind_int16","Binds an int16_t value to the prepared statement at the specified index."],["duckdb_bind_int32","Binds an int32_t value to the prepared statement at the specified index."],["duckdb_bind_int64","Binds an int64_t value to the prepared statement at the specified index."],["duckdb_bind_int8","Binds an int8_t value to the prepared statement at the specified index."],["duckdb_bind_interval","Binds a duckdb_interval value to the prepared statement at the specified index."],["duckdb_bind_null","Binds a NULL value to the prepared statement at the specified index."],["duckdb_bind_set_bind_data","Sets the user-provided bind data in the bind object. This object can be retrieved again during execution."],["duckdb_bind_set_error","Report that an error has occurred while calling bind."],["duckdb_bind_time","Binds a duckdb_time value to the prepared statement at the specified index."],["duckdb_bind_timestamp","Binds a duckdb_timestamp value to the prepared statement at the specified index."],["duckdb_bind_uint16","Binds an uint16_t value to the prepared statement at the specified index."],["duckdb_bind_uint32","Binds an uint32_t value to the prepared statement at the specified index."],["duckdb_bind_uint64","Binds an uint64_t value to the prepared statement at the specified index."],["duckdb_bind_uint8","Binds an uint8_t value to the prepared statement at the specified index."],["duckdb_bind_varchar","Binds a null-terminated varchar value to the prepared statement at the specified index."],["duckdb_bind_varchar_length","Binds a varchar value to the prepared statement at the specified index."],["duckdb_close","Closes the specified database and de-allocates all memory allocated for that database. This should be called after you are done with any database allocated through `duckdb_open`. Note that failing to call `duckdb_close` (in case of e.g. a program crash) will not cause data corruption. Still it is recommended to always correctly close a database object after you are done with it."],["duckdb_column_count","Returns the number of columns present in a the result object."],["duckdb_column_data","DEPRECATED**: Prefer using `duckdb_result_get_chunk` instead."],["duckdb_column_logical_type","Returns the logical column type of the specified column."],["duckdb_column_name","Returns the column name of the specified column. The result should not need be freed; the column names will automatically be destroyed when the result is destroyed."],["duckdb_column_type","Returns the column type of the specified column."],["duckdb_config_count","This returns the total amount of configuration options available for usage with `duckdb_get_config_flag`."],["duckdb_connect","Opens a connection to a database. Connections are required to query the database, and store transactional state associated with the connection."],["duckdb_create_config","Initializes an empty configuration object that can be used to provide start-up options for the DuckDB instance through `duckdb_open_ext`."],["duckdb_create_data_chunk","Creates an empty DataChunk with the specified set of types."],["duckdb_create_decimal_type","Creates a `duckdb_logical_type` of type decimal with the specified width and scale The resulting type should be destroyed with `duckdb_destroy_logical_type`."],["duckdb_create_int64","Creates a value from an int64"],["duckdb_create_list_type","Creates a list type from its child type. The resulting type should be destroyed with `duckdb_destroy_logical_type`."],["duckdb_create_logical_type","Creates a `duckdb_logical_type` from a standard primitive type. The resulting type should be destroyed with `duckdb_destroy_logical_type`."],["duckdb_create_map_type","Creates a map type from its key type and value type. The resulting type should be destroyed with `duckdb_destroy_logical_type`."],["duckdb_create_table_function","Creates a new empty table function."],["duckdb_create_varchar","Creates a value from a null-terminated string"],["duckdb_create_varchar_length","Creates a value from a string"],["duckdb_data_chunk_get_column_count","Retrieves the number of columns in a data chunk."],["duckdb_data_chunk_get_size","Retrieves the current number of tuples in a data chunk."],["duckdb_data_chunk_get_vector","Retrieves the vector at the specified column index in the data chunk."],["duckdb_data_chunk_reset","Resets a data chunk, clearing the validity masks and setting the cardinality of the data chunk to 0."],["duckdb_data_chunk_set_size","Sets the current number of tuples in a data chunk."],["duckdb_decimal_internal_type","Retrieves the internal storage type of a decimal type."],["duckdb_decimal_scale","Retrieves the scale of a decimal type."],["duckdb_decimal_to_double","Converts a duckdb_decimal object (as obtained from a `DUCKDB_TYPE_DECIMAL` column) into a double."],["duckdb_decimal_width","Retrieves the width of a decimal type."],["duckdb_destroy_arrow","Closes the result and de-allocates all memory allocated for the arrow result."],["duckdb_destroy_config","Destroys the specified configuration option and de-allocates all memory allocated for the object."],["duckdb_destroy_data_chunk","Destroys the data chunk and de-allocates all memory allocated for that chunk."],["duckdb_destroy_logical_type","Destroys the logical type and de-allocates all memory allocated for that type."],["duckdb_destroy_prepare","Closes the prepared statement and de-allocates all memory allocated for the statement."],["duckdb_destroy_result","Closes the result and de-allocates all memory allocated for that connection."],["duckdb_destroy_table_function","Destroys the given table function object."],["duckdb_destroy_value","Destroys the value and de-allocates all memory allocated for that type."],["duckdb_disconnect","Closes the specified connection and de-allocates all memory allocated for that connection."],["duckdb_double_to_hugeint","Converts a double value to a duckdb_hugeint object."],["duckdb_enum_dictionary_size","Retrieves the dictionary size of the enum type"],["duckdb_enum_dictionary_value","Retrieves the dictionary value at the specified position from the enum."],["duckdb_enum_internal_type","Retrieves the internal storage type of an enum type."],["duckdb_execute_prepared","Executes the prepared statement with the given bound parameters, and returns a materialized query result."],["duckdb_execute_prepared_arrow","Executes the prepared statement with the given bound parameters, and returns an arrow query result."],["duckdb_execute_tasks","Execute DuckDB tasks on this thread."],["duckdb_free","Free a value returned from `duckdb_malloc`, `duckdb_value_varchar` or `duckdb_value_blob`."],["duckdb_from_date","Decompose a `duckdb_date` object into year, month and date (stored as `duckdb_date_struct`)."],["duckdb_from_time","Decompose a `duckdb_time` object into hour, minute, second and microsecond (stored as `duckdb_time_struct`)."],["duckdb_from_timestamp","Decompose a `duckdb_timestamp` object into a `duckdb_timestamp_struct`."],["duckdb_function_get_bind_data","Gets the bind data set by `duckdb_bind_set_bind_data` during the bind."],["duckdb_function_get_extra_info","Retrieves the extra info of the function as set in `duckdb_table_function_set_extra_info`"],["duckdb_function_get_init_data","Gets the init data set by `duckdb_init_set_init_data` during the init."],["duckdb_function_get_local_init_data","Gets the thread-local init data set by `duckdb_init_set_init_data` during the local_init."],["duckdb_function_set_error","Report that an error has occurred while executing the function."],["duckdb_get_config_flag","Obtains a human-readable name and description of a specific configuration option. This can be used to e.g. display configuration options. This will succeed unless `index` is out of range (i.e. `>= duckdb_config_count`)."],["duckdb_get_int64","Obtains an int64 of the given value."],["duckdb_get_type_id","Retrieves the type class of a `duckdb_logical_type`."],["duckdb_get_varchar","Obtains a string representation of the given value. The result must be destroyed with `duckdb_free`."],["duckdb_hugeint_to_double","Converts a duckdb_hugeint object (as obtained from a `DUCKDB_TYPE_HUGEINT` column) into a double."],["duckdb_init_get_bind_data","Gets the bind data set by `duckdb_bind_set_bind_data` during the bind."],["duckdb_init_get_column_count","Returns the number of projected columns."],["duckdb_init_get_column_index","Returns the column index of the projected column at the specified position."],["duckdb_init_get_extra_info","Retrieves the extra info of the function as set in `duckdb_table_function_set_extra_info`"],["duckdb_init_set_error","Report that an error has occurred while calling init."],["duckdb_init_set_init_data","Sets the user-provided init data in the init object. This object can be retrieved again during execution."],["duckdb_init_set_max_threads","Sets how many threads can process this table function in parallel (default: 1)"],["duckdb_list_type_child_type","Retrieves the child type of the given list type."],["duckdb_list_vector_get_child","Retrieves the child vector of a list vector."],["duckdb_list_vector_get_size","Returns the size of the child vector of the list"],["duckdb_malloc","Allocate `size` bytes of memory using the duckdb internal malloc function. Any memory allocated in this manner should be freed using `duckdb_free`."],["duckdb_map_type_key_type","Retrieves the key type of the given map type."],["duckdb_map_type_value_type","Retrieves the value type of the given map type."],["duckdb_nparams","Returns the number of parameters that can be provided to the given prepared statement."],["duckdb_nullmask_data","DEPRECATED**: Prefer using `duckdb_result_get_chunk` instead."],["duckdb_open","Creates a new database or opens an existing database file stored at the the given path. If no path is given a new in-memory database is created instead."],["duckdb_open_ext","Extended version of duckdb_open. Creates a new database or opens an existing database file stored at the the given path."],["duckdb_param_type","Returns the parameter type for the parameter at the given index."],["duckdb_prepare","Create a prepared statement object from a query."],["duckdb_prepare_error","Returns the error message associated with the given prepared statement. If the prepared statement has no error message, this returns `nullptr` instead."],["duckdb_query","Executes a SQL query within a connection and stores the full (materialized) result in the out_result pointer. If the query fails to execute, DuckDBError is returned and the error message can be retrieved by calling `duckdb_result_error`."],["duckdb_query_arrow","Executes a SQL query within a connection and stores the full (materialized) result in an arrow structure. If the query fails to execute, DuckDBError is returned and the error message can be retrieved by calling `duckdb_query_arrow_error`."],["duckdb_query_arrow_array","Fetch an internal arrow array from the arrow result."],["duckdb_query_arrow_error","Returns the error message contained within the result. The error is only set if `duckdb_query_arrow` returns `DuckDBError`."],["duckdb_query_arrow_schema","Fetch the internal arrow schema from the arrow result."],["duckdb_register_table_function","Register the table function object within the given connection."],["duckdb_replacement_scan_add_parameter","Adds a parameter to the replacement scan function."],["duckdb_replacement_scan_set_function_name","Sets the replacement function name to use. If this function is called in the replacement callback, the replacement scan is performed. If it is not called, the replacement callback is not performed."],["duckdb_result_chunk_count","Returns the number of data chunks present in the result."],["duckdb_result_error","Returns the error message contained within the result. The error is only set if `duckdb_query` returns `DuckDBError`."],["duckdb_result_get_chunk","Fetches a data chunk from the duckdb_result. This function should be called repeatedly until the result is exhausted."],["duckdb_row_count","Returns the number of rows present in a the result object."],["duckdb_rows_changed","Returns the number of rows changed by the query stored in the result. This is relevant only for INSERT/UPDATE/DELETE queries. For other queries the rows_changed will be 0."],["duckdb_set_config","Sets the specified option for the specified configuration. The configuration option is indicated by name. To obtain a list of config options, see `duckdb_get_config_flag`."],["duckdb_struct_type_child_count","Returns the number of children of a struct type."],["duckdb_struct_type_child_name","Retrieves the name of the struct child."],["duckdb_struct_type_child_type","Retrieves the child type of the given struct type at the specified index."],["duckdb_struct_vector_get_child","Retrieves the child vector of a struct vector."],["duckdb_table_function_add_parameter","Adds a parameter to the table function."],["duckdb_table_function_set_bind","Sets the bind function of the table function"],["duckdb_table_function_set_extra_info","Assigns extra information to the table function that can be fetched during binding, etc."],["duckdb_table_function_set_function","Sets the main function of the table function"],["duckdb_table_function_set_init","Sets the init function of the table function"],["duckdb_table_function_set_local_init","Sets the thread-local init function of the table function"],["duckdb_table_function_set_name","Sets the name of the given table function."],["duckdb_table_function_supports_projection_pushdown","Sets whether or not the given table function supports projection pushdown."],["duckdb_to_date","Re-compose a `duckdb_date` from year, month and date (`duckdb_date_struct`)."],["duckdb_to_time","Re-compose a `duckdb_time` from hour, minute, second and microsecond (`duckdb_time_struct`)."],["duckdb_to_timestamp","Re-compose a `duckdb_timestamp` from a duckdb_timestamp_struct."],["duckdb_validity_row_is_valid","Returns whether or not a row is valid (i.e. not NULL) in the given validity mask."],["duckdb_validity_set_row_invalid","In a validity mask, sets a specific row to invalid."],["duckdb_validity_set_row_valid","In a validity mask, sets a specific row to valid."],["duckdb_validity_set_row_validity","In a validity mask, sets a specific row to either valid or invalid."],["duckdb_value_blob","returns: The duckdb_blob value at the specified location. Returns a blob with blob.data set to nullptr if the value cannot be converted. The resulting “blob.data” must be freed with `duckdb_free.`"],["duckdb_value_boolean","returns: The boolean value at the specified location, or false if the value cannot be converted."],["duckdb_value_date","returns: The duckdb_date value at the specified location, or 0 if the value cannot be converted."],["duckdb_value_decimal","returns: The duckdb_decimal value at the specified location, or 0 if the value cannot be converted."],["duckdb_value_double","returns: The double value at the specified location, or 0 if the value cannot be converted."],["duckdb_value_float","returns: The float value at the specified location, or 0 if the value cannot be converted."],["duckdb_value_hugeint","returns: The duckdb_hugeint value at the specified location, or 0 if the value cannot be converted."],["duckdb_value_int16","returns: The int16_t value at the specified location, or 0 if the value cannot be converted."],["duckdb_value_int32","returns: The int32_t value at the specified location, or 0 if the value cannot be converted."],["duckdb_value_int64","returns: The int64_t value at the specified location, or 0 if the value cannot be converted."],["duckdb_value_int8","returns: The int8_t value at the specified location, or 0 if the value cannot be converted."],["duckdb_value_interval","returns: The duckdb_interval value at the specified location, or 0 if the value cannot be converted."],["duckdb_value_is_null","returns: Returns true if the value at the specified index is NULL, and false otherwise."],["duckdb_value_time","returns: The duckdb_time value at the specified location, or 0 if the value cannot be converted."],["duckdb_value_timestamp","returns: The duckdb_timestamp value at the specified location, or 0 if the value cannot be converted."],["duckdb_value_uint16","returns: The uint16_t value at the specified location, or 0 if the value cannot be converted."],["duckdb_value_uint32","returns: The uint32_t value at the specified location, or 0 if the value cannot be converted."],["duckdb_value_uint64","returns: The uint64_t value at the specified location, or 0 if the value cannot be converted."],["duckdb_value_uint8","returns: The uint8_t value at the specified location, or 0 if the value cannot be converted."],["duckdb_value_varchar","returns: The char* value at the specified location, or nullptr if the value cannot be converted. The result must be freed with `duckdb_free`."],["duckdb_value_varchar_internal","returns: The char* value at the specified location. ONLY works on VARCHAR columns and does not auto-cast. If the column is NOT a VARCHAR column this function will return NULL."],["duckdb_vector_assign_string_element","Assigns a string element in the vector at the specified location."],["duckdb_vector_assign_string_element_len","Assigns a string element in the vector at the specified location."],["duckdb_vector_ensure_validity_writable","Ensures the validity mask is writable by allocating it."],["duckdb_vector_get_column_type","Retrieves the column type of the specified vector."],["duckdb_vector_get_data","Retrieves the data pointer of the vector."],["duckdb_vector_get_validity","Retrieves the validity mask pointer of the specified vector."],["duckdb_vector_size","The internal vector size used by DuckDB. This is the amount of tuples that will fit into a data chunk created by `duckdb_create_data_chunk`."],["ecvt",""],["ecvt_r",""],["erand48",""],["erand48_r",""],["exit",""],["fcvt",""],["fcvt_r",""],["free",""],["gcvt",""],["getenv",""],["getloadavg",""],["getsubopt",""],["initstate",""],["initstate_r",""],["jrand48",""],["jrand48_r",""],["l64a",""],["labs",""],["lcong48",""],["lcong48_r",""],["ldiv",""],["llabs",""],["lldiv",""],["lrand48",""],["lrand48_r",""],["malloc",""],["mblen",""],["mbstowcs",""],["mbtowc",""],["mkdtemp",""],["mkstemp",""],["mkstemps",""],["mktemp",""],["mrand48",""],["mrand48_r",""],["nrand48",""],["nrand48_r",""],["on_exit",""],["posix_memalign",""],["pselect",""],["putenv",""],["qecvt",""],["qecvt_r",""],["qfcvt",""],["qfcvt_r",""],["qgcvt",""],["qsort",""],["quick_exit",""],["rand",""],["rand_r",""],["random",""],["random_r",""],["realloc",""],["reallocarray",""],["realpath",""],["rpmatch",""],["seed48",""],["seed48_r",""],["select",""],["setenv",""],["setstate",""],["setstate_r",""],["srand",""],["srand48",""],["srand48_r",""],["srandom",""],["srandom_r",""],["strtod",""],["strtof",""],["strtol",""],["strtold",""],["strtoll",""],["strtoq",""],["strtoul",""],["strtoull",""],["strtouq",""],["system",""],["unsetenv",""],["valloc",""],["wcstombs",""],["wctomb",""]],"struct":[["Error",""],["__fsid_t",""],["__pthread_cond_s",""],["__pthread_cond_s__bindgen_ty_1__bindgen_ty_1",""],["__pthread_cond_s__bindgen_ty_2__bindgen_ty_1",""],["__pthread_internal_list",""],["__pthread_internal_slist",""],["__pthread_mutex_s",""],["__pthread_rwlock_arch_t",""],["__sigset_t",""],["div_t",""],["drand48_data",""],["duckdb_blob",""],["duckdb_column",""],["duckdb_date","! Days are stored as days since 1970-01-01 ! Use the duckdb_from_date/duckdb_to_date function to extract individual information"],["duckdb_date_struct",""],["duckdb_decimal",""],["duckdb_hugeint","! Hugeints are composed in a (lower, upper) component ! The value of the hugeint is upper * 2^64 + lower ! For easy usage, the functions duckdb_hugeint_to_double/duckdb_double_to_hugeint are recommended"],["duckdb_interval",""],["duckdb_result",""],["duckdb_time","! Time is stored as microseconds since 00:00:00 ! Use the duckdb_from_time/duckdb_to_time function to extract individual information"],["duckdb_time_struct",""],["duckdb_timestamp","! Timestamps are stored as microseconds since 1970-01-01 ! Use the duckdb_from_timestamp/duckdb_to_timestamp function to extract individual information"],["duckdb_timestamp_struct",""],["fd_set",""],["ldiv_t",""],["lldiv_t",""],["random_data",""],["timespec",""],["timeval",""]],"type":[["DUCKDB_TYPE",""],["_Float32",""],["_Float32x",""],["_Float64",""],["_Float64x",""],["__blkcnt64_t",""],["__blkcnt_t",""],["__blksize_t",""],["__caddr_t",""],["__clock_t",""],["__clockid_t",""],["__compar_fn_t",""],["__daddr_t",""],["__dev_t",""],["__fd_mask",""],["__fsblkcnt64_t",""],["__fsblkcnt_t",""],["__fsfilcnt64_t",""],["__fsfilcnt_t",""],["__fsword_t",""],["__gid_t",""],["__id_t",""],["__ino64_t",""],["__ino_t",""],["__int16_t",""],["__int32_t",""],["__int64_t",""],["__int8_t",""],["__int_least16_t",""],["__int_least32_t",""],["__int_least64_t",""],["__int_least8_t",""],["__intmax_t",""],["__intptr_t",""],["__key_t",""],["__loff_t",""],["__mode_t",""],["__nlink_t",""],["__off64_t",""],["__off_t",""],["__pid_t",""],["__pthread_list_t",""],["__pthread_slist_t",""],["__quad_t",""],["__rlim64_t",""],["__rlim_t",""],["__sig_atomic_t",""],["__socklen_t",""],["__ssize_t",""],["__suseconds_t",""],["__syscall_slong_t",""],["__syscall_ulong_t",""],["__time_t",""],["__timer_t",""],["__u_char",""],["__u_int",""],["__u_long",""],["__u_quad_t",""],["__u_short",""],["__uid_t",""],["__uint16_t",""],["__uint32_t",""],["__uint64_t",""],["__uint8_t",""],["__uint_least16_t",""],["__uint_least32_t",""],["__uint_least64_t",""],["__uint_least8_t",""],["__uintmax_t",""],["__useconds_t",""],["blkcnt_t",""],["blksize_t",""],["caddr_t",""],["clock_t",""],["clockid_t",""],["daddr_t",""],["dev_t",""],["duckdb_appender",""],["duckdb_arrow",""],["duckdb_arrow_array",""],["duckdb_arrow_schema",""],["duckdb_bind_info",""],["duckdb_config",""],["duckdb_connection",""],["duckdb_data_chunk",""],["duckdb_database",""],["duckdb_delete_callback_t",""],["duckdb_function_info",""],["duckdb_init_info",""],["duckdb_logical_type",""],["duckdb_prepared_statement",""],["duckdb_replacement_callback_t",""],["duckdb_replacement_scan_info",""],["duckdb_state",""],["duckdb_table_function",""],["duckdb_table_function_bind_t",""],["duckdb_table_function_init_t",""],["duckdb_table_function_t",""],["duckdb_type",""],["duckdb_value",""],["duckdb_vector",""],["fd_mask",""],["fsblkcnt_t",""],["fsfilcnt_t",""],["fsid_t",""],["gid_t",""],["id_t",""],["idtype_t",""],["idx_t",""],["ino_t",""],["int_fast16_t",""],["int_fast32_t",""],["int_fast64_t",""],["int_fast8_t",""],["int_least16_t",""],["int_least32_t",""],["int_least64_t",""],["int_least8_t",""],["intmax_t",""],["key_t",""],["loff_t",""],["mode_t",""],["nlink_t",""],["off_t",""],["pid_t",""],["pthread_key_t",""],["pthread_once_t",""],["pthread_spinlock_t",""],["pthread_t",""],["quad_t",""],["register_t",""],["sigset_t",""],["size_t",""],["ssize_t",""],["suseconds_t",""],["time_t",""],["timer_t",""],["u_char",""],["u_int",""],["u_int16_t",""],["u_int32_t",""],["u_int64_t",""],["u_int8_t",""],["u_long",""],["u_quad_t",""],["u_short",""],["uid_t",""],["uint",""],["uint_fast16_t",""],["uint_fast32_t",""],["uint_fast64_t",""],["uint_fast8_t",""],["uint_least16_t",""],["uint_least32_t",""],["uint_least64_t",""],["uint_least8_t",""],["uintmax_t",""],["ulong",""],["ushort",""],["wchar_t",""]],"union":[["__pthread_cond_s__bindgen_ty_1",""],["__pthread_cond_s__bindgen_ty_2",""],["pthread_attr_t",""],["pthread_barrier_t",""],["pthread_barrierattr_t",""],["pthread_cond_t",""],["pthread_condattr_t",""],["pthread_mutex_t",""],["pthread_mutexattr_t",""],["pthread_rwlock_t",""],["pthread_rwlockattr_t",""]]});