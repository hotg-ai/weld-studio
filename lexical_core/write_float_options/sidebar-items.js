initSidebarItems({"constant":[["CARAT_EXPONENT","Numerical format where `^` is used as the exponent notation character. This isnâ€™t very common, but is useful when `e` or `p` are valid digits."],["CLOJURE_LITERAL","Number format for a Clojure literal floating-point number."],["CLOJURE_STRING","Number format to parse a Clojure float from string."],["COBOL_LITERAL","Number format for a COBOL literal floating-point number."],["COBOL_STRING","Number format to parse a COBOL float from string."],["COFFEESCRIPT_LITERAL","Number format for a Coffeescript literal floating-point number."],["COFFEESCRIPT_STRING","Number format to parse a Coffeescript float from string."],["CSHARP_LITERAL","Number format for a C# literal floating-point number."],["CSHARP_STRING","Number format to parse a C# float from string."],["CXX_LITERAL","Number format for a C++ literal floating-point number."],["C_LITERAL","Number format for a C literal floating-point number."],["DECIMAL_COMMA","Numerical format with a decimal comma. This is the standard numerical format for most of the world."],["D_LITERAL","Number format for a D literal floating-point number."],["ELIXIR_LITERAL","Number format for an Elixir literal floating-point number."],["ELIXIR_STRING","Number format to parse an Elixir float from string."],["ELM_LITERAL","Number format for an Elm literal floating-point number."],["ELM_STRING","Number format to parse an Elm float from string."],["ERLANG_LITERAL","Number format for an Erlang literal floating-point number."],["ERLANG_STRING","Number format to parse an Erlang float from string."],["FORTRAN_LITERAL","Number format for a FORTRAN literal floating-point number."],["FSHARP_LITERAL","Number format for an F# literal floating-point number."],["GAMBITC_LITERAL","Number format for a Gambit-C literal floating-point number."],["GAMBITC_STRING","Number format to parse a Gambit-C float from string."],["GO_LITERAL","Number format for a Go literal floating-point number."],["GUILE_LITERAL","Number format for a Guile literal floating-point number."],["GUILE_STRING","Number format to parse a Guile float from string."],["HASKELL_LITERAL","Number format for a Haskell literal floating-point number."],["HASKELL_STRING","Number format to parse a Haskell float from string."],["HEX_FLOAT","Numerical format for hexadecimal floats, which use a `p` exponent."],["JAVASCRIPT_LITERAL","Number format for a Javascript literal floating-point number."],["JAVASCRIPT_STRING","Number format to parse a Javascript float from string."],["JAVA_LITERAL","Number format for a Java literal floating-point number."],["JAVA_STRING","Number format to parse a Java float from string."],["JSON","Number format for a JSON literal floating-point number."],["JULIA_LITERAL","Number format for a Julia literal floating-point number."],["KAWA_LITERAL","Number format for a Kawa literal floating-point number."],["KAWA_STRING","Number format to parse a Kawa float from string."],["KOTLIN_LITERAL","Number format for a Kotlin literal floating-point number."],["KOTLIN_STRING","Number format to parse a Kotlin float from string."],["MATLAB_LITERAL","Number format for a MATLAB literal floating-point number."],["MONGODB","Number format for a MongoDB literal floating-point number."],["MYSQL","Number format for a MySQL literal floating-point number."],["OBJECTIVEC_LITERAL","Number format for an Objective-C literal floating-point number."],["OBJECTIVEC_STRING","Number format to parse an Objective-C float from string."],["OCAML_LITERAL","Number format for an OCaml literal floating-point number."],["PERL_LITERAL","Number format for a Perl literal floating-point number."],["PHP_LITERAL","Number format for a PHP literal floating-point number."],["POSTGRESQL","Number format for a PostgreSQL literal floating-point number."],["PYTHON_LITERAL","Number format for a Python literal floating-point number."],["REASONML_LITERAL","Number format for an ReasonML literal floating-point number."],["RUBY_LITERAL","Number format for a Ruby literal floating-point number."],["RUBY_STRING","Number format to parse a Ruby float from string."],["RUST_LITERAL","Number format for a Rust literal floating-point number."],["R_LITERAL","Number format for an R literal floating-point number."],["SAGE_LITERAL","Number format for a Safe literal floating-point number."],["SCALA_LITERAL","Number format for a Scala literal floating-point number."],["SCALA_STRING","Number format to parse a Scala float from string."],["SQLITE","Number format for a SQLite literal floating-point number."],["STANDARD","Standard number format."],["SWIFT_LITERAL","Number format for a Swift literal floating-point number."],["TOML","Number format for a TOML literal floating-point number."],["VB_LITERAL","Number format for a Visual Basic literal floating-point number."],["VB_STRING","Number format to parse a Visual Basic float from string."],["XML","Number format for an XML literal floating-point number."],["YAML","Number format for a YAML literal floating-point number."],["ZIG_LITERAL","Number format for a Zig literal floating-point number."]],"enum":[["RoundMode","Enumeration for how to round floats with precision control."]],"struct":[["Options","Options to customize writing floats."],["OptionsBuilder","Builder for `Options`."]],"type":[["OptionI32","Type with the exact same size as a `i32`."],["OptionUsize","Type with the exact same size as a `usize`."]]});