name: Releases

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"
      - nightly

env:
  # Hack to make "yarn build" succeed even though the frontend has loads of
  # eslint issues
  DISABLE_ESLINT_PLUGIN: true

jobs:
  create-release:
    name: Create the Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: Get Version
        run: echo "::set-output name=package_version::$(node -p "require('./src-tauri/tauri.conf.json').package.version")"
      - name: Create Release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { package: {version} } = require("./src-tauri/tauri.conf.json");
            const manuallyTriggered = "${{ github.event_name }}" == "workflow_dispatch";
            let tag = "${{ github.ref }}";

            if (manuallyTriggered) {
              const actor = context.actor;
              exec.exec("git", ["config", "user.name", actor]);
              exec.exec("git", ["config", "user.email", `${actor}@users.noreply.github.com`]);

              console.log("Pointing the nightly tag at this commit");
              exec.exec("git", ["tag", "nightly", "--force", "--annotate", "--message", "Nightly commit"])
              exec.exec("git", ["push", "origin", "nightly", "--force"])
              tag = "refs/tags/nightly";
            }

            const isNightly = tag == "refs/tags/nightly";
            const name = isNightly ? "Weld Studio (nightly)" : `Weld Studio v${version}`;
            const { owner, repo } = context.repo;

            const { data } = await github.rest.repos.createRelease({
              owner,
              repo,
              name,
              tag_name: tag,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })

            return data.id

  upload-installers:
    name: Upload Installers
    strategy:
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.platform }}
    needs: [create-release]
    steps:
      - uses: actions/checkout@v2
      - name: Rust Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ github.job }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: JavaScript Cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy, rustfmt
      - name: Install System Dependencies (Linux only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf libdbus-1-dev pkg-config
      - name: Install Frontend Dependencies
        run: yarn
      - name: Build Frontend
        run: yarn build
      - name: Build and upload artifacts
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}

  publish-release:
    name: Make the release public
    runs-on: ubuntu-latest
    needs: [create-release, upload-installers]
    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create-release.outputs.release_id }}
        with:
          script: |
            const { owner, repo } = context.repo;
            github.rest.repos.updateRelease({
              owner,
              repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
