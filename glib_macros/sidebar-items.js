initSidebarItems({"attr":[["flags","Attribute macro for defining flags using the `bitflags` crate. This macro will also define a `GFlags::type_` function and the `glib::Value` traits."],["object_interface","Macro for boilerplate of `ObjectInterface` implementations."],["object_subclass","Macro for boilerplate of `ObjectSubclass` implementations."]],"derive":[["Boxed","Derive macro for defining a `BoxedType``::type_` function and the `glib::Value` traits."],["Downgrade","Macro for deriving implementations of `glib::clone::Downgrade` and `glib::clone::Upgrade` traits and a weak type."],["Enum","Derive macro for register a rust enum in the glib type system and derive the the [`glib::Value`] traits."],["ErrorDomain","Derive macro for defining a GLib error domain and its associated `ErrorDomain` trait."],["SharedBoxed","Derive macro for defining a `SharedType``::get_type` function and the `glib::Value` traits."],["Variant","Derive macro for serializing/deserializing custom structs as `glib::Variant`s."]],"macro":[["clone","Macro for passing variables as strong or weak references into a closure."],["closure","Macro for creating a `Closure` object. This is a wrapper around `Closure::new` that automatically type checks its arguments at run-time."],["closure_local","The same as `closure!` but uses `Closure::new_local` as a constructor. This is useful for closures which canâ€™t be sent across threads. See the documentation of `closure!` for details."],["cstr_bytes",""]]});